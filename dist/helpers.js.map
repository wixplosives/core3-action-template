{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../src/helpers.ts"],"names":[],"mappings":"AAKA,MAAM,IAAI,GAAG,KAAK,EAAE,YAAoB,EAAmB,EAAE;IACzD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC3B,IAAI,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QACjD,CAAC;QACD,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,YAAY,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAqB,EAAmB,EAAE;IAC5F,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IAChB,MAAM,MAAM,GAAG,GAAG,IAAI,OAAO,OAAO,EAAE,CAAC;IACvC,OAAO,MAAM,CAAC;AAClB,CAAC,CAAC","sourcesContent":["export interface IExampleInterface {\r\n    name: string;\r\n    jobName: string;\r\n}\r\n\r\nconst wait = async (milliseconds: number): Promise<string> => {\r\n    return new Promise((resolve) => {\r\n        if (isNaN(milliseconds)) {\r\n            throw new Error('milliseconds not a number');\r\n        }\r\n        setTimeout(() => resolve('done!'), milliseconds);\r\n    });\r\n};\r\n\r\nexport const generateGreeting = async ({ name, jobName }: IExampleInterface): Promise<string> => {\r\n    await wait(100);\r\n    const result = `${name} => ${jobName}`;\r\n    return result;\r\n};\r\n"]}